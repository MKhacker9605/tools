For an easy start, I recommend Creating a REST API with Python (Flask) because it is beginner-friendly, doesn't require advanced tools, and focuses on fundamental concepts of web APIs. Here's how you can proceed:


---

Creating a REST API with Python (Flask)

Aim: Build a simple REST API to perform GET, POST, PUT, and DELETE operations.


---

Steps for Implementation

1. Install Flask:

Open your terminal.

Run the command:

pip install flask



2. Write the Code:

Create a file called app.py.

Copy and paste the following code:

from flask import Flask, jsonify, request

app = Flask(__name__)

# Sample data
data = [
    {'id': 1, 'name': 'Item 1'},
    {'id': 2, 'name': 'Item 2'},
    {'id': 3, 'name': 'Item 3'}
]

# GET: Retrieve all items
@app.route('/items', methods=['GET'])
def get_items():
    return jsonify({'items': data})

# GET: Retrieve a specific item by ID
@app.route('/items/<int:item_id>', methods=['GET'])
def get_item(item_id):
    item = next((item for item in data if item['id'] == item_id), None)
    return jsonify({'item': item}) if item else jsonify({'message': 'Item not found'}), 404

# POST: Add a new item
@app.route('/items', methods=['POST'])
def add_item():
    new_item = {'id': len(data) + 1, 'name': request.json['name']}
    data.append(new_item)
    return jsonify({'item': new_item}), 201

# PUT: Update a specific item
@app.route('/items/<int:item_id>', methods=['PUT'])
def update_item(item_id):
    item = next((item for item in data if item['id'] == item_id), None)
    if item:
        item['name'] = request.json['name']
        return jsonify({'item': item})
    else:
        return jsonify({'message': 'Item not found'}), 404

# DELETE: Remove a specific item
@app.route('/items/<int:item_id>', methods=['DELETE'])
def delete_item(item_id):
    global data
    data = [item for item in data if item['id'] != item_id]
    return jsonify({'message': 'Item deleted'}), 200

if __name__ == '__main__':
    app.run(debug=True)



3. Run the Application:

In your terminal, navigate to the directory where app.py is saved.

Start the Flask server:

python app.py

You'll see output like:

Running on http://127.0.0.1:5000/



4. Test the API using Postman:

Download and install Postman.

Use the following endpoints:

GET All Items: http://127.0.0.1:5000/items

GET Item by ID: http://127.0.0.1:5000/items/1

POST New Item: http://127.0.0.1:5000/items (Body: {"name": "New Item"})

PUT Update Item: http://127.0.0.1:5000/items/1 (Body: {"name": "Updated Item"})

DELETE Item: http://127.0.0.1:5000/items/1




5. View Results:

Responses will appear in Postman.

You'll also see logs in the terminal running Flask.





---

This exercise will help you understand API design basics while reinforcing Python and HTTP concepts. Would you like more detailed help with any step?

